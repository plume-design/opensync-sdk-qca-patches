NFM: miniupnpd now adds fw rules via an external script

One of the major roadblocks for NFM deploy is miniupnpd. The issue is
that NFM uses iptables-save/iptables-restore for iptables rule
management. This means that every time a rule is changed, all system
rules are overwritten by NFM rules. This effectively erases all rules
added by miniupnpd.

To properly fix this, miniupnpd must add rules to the Netfilter table,
but the issue is that miniupnpd doesn't have a backend that is usable
for this purpose.

This commit introduces an "iptscript" backend to miniupnpd which teaches
miniupnpd how to add rules via a script. The script is located in
/etc/miniupnpd/iptscript.sh and accepts the following commands:

- init: Initialize firewall
- fini: Deinit firewall
- add_forward_rule: Add port forwarding rule
- del_forward_rule: Delete port forwarding rule
- add_filter_rule: Add a filtering rule (accept)
- del_filter_rule: Delete a filtering rule (accept)

The "iptscript" also takes care of some miniupnpd peculiarities, but
featurewise it should be similar to the default "netfilter" backend.

Depending if NFM is enabled, OpenSync will either use the default
iptscript.sh or install NFM specific iptscript.sh that uses ovsh to
manager Netfilter rules.
=======================================
--- a/configure
+++ b/configure
@@ -1,4 +1,3 @@
-#! /bin/sh
 # $Id: configure,v 1.115 2020/10/31 09:14:38 nanard Exp $
 # vim: tabstop=4 shiftwidth=4 noexpandtab
 #
@@ -28,6 +27,7 @@ case "$argv" in
 	--vendorcfg) VENDORCFG=1 ;;
 	--pcp-peer) PCP_PEER=1 ;;
 	--portinuse) PORTINUSE=1 ;;
+	--iptscript) USE_IPTSCRIPT=1 ;;
 	--uda-version=*)
 		UPNP_VERSION=$(echo $argv | cut -d= -f2)
 		UPNP_VERSION_MAJOR=$(echo $UPNP_VERSION | cut -s -d. -f1)
@@ -431,15 +431,17 @@ case $OS_NAME in
 		;;
 esac
 
+[ -z "$USE_IPTSCRIPT" ] || echo "#define USE_IPTSCRIPT 1" >> ${CONFIGFILE}
+
 case $FW in
 	pf)
-		echo "#define USE_PF 1" >> ${CONFIGFILE}
+		[ -z "$USE_IPTSCRIPT" ] && echo "#define USE_PF 1" >> ${CONFIGFILE}
 		;;
 	ipf)
-		echo "#define USE_IPF 1" >> ${CONFIGFILE}
+		[ -z "$USE_IPTSCRIPT" ] && echo "#define USE_IPF 1" >> ${CONFIGFILE}
 		;;
 	ipfw)
-		echo "#define USE_IPFW 1" >> ${CONFIGFILE}
+		[ -z "$USE_IPTSCRIPT" ] && echo "#define USE_IPFW 1" >> ${CONFIGFILE}
 		;;
 	iptables)
 		MAKEFILE=Makefile.linux
@@ -691,6 +693,14 @@ else
 fi
 echo "" >> ${CONFIGFILE}
 
+echo "/* Uncomment the following line to use a shell script for managing firewall rules instead of libiptc */" >> ${CONFIGFILE}
+if [ -n "$USE_IPTSCRIPT" ]; then
+	echo "#define IPTSCRIPT_PATH" \"/etc/miniupnpd/iptscript.sh\" >> ${CONFIGFILE}
+else
+	echo "/*#define IPTSCRIPT_PATH*/" >> ${CONFIGFILE}
+fi
+echo "" >> ${CONFIGFILE}
+
 echo "/* Define one or none of the two following macros in order to make some" >> ${CONFIGFILE}
 echo " * clients happy. It will change the XML Root Description of the IGD." >> ${CONFIGFILE}
 echo " * Enabling the Layer3Forwarding Service seems to be the more compatible" >> ${CONFIGFILE}
--- a/Makefile.linux
+++ b/Makefile.linux
@@ -51,21 +51,31 @@ SBININSTALLDIR = $(INSTALLPREFIX)/sbin
 ETCINSTALLDIR = $(PREFIX)/etc/miniupnpd
 MANINSTALLDIR = $(INSTALLPREFIX)/share/man/man8
 
+IPTSCRIPT := $(if $(filter --iptscript,$(CONFIG_OPTIONS)),y)
+
 include config.mk
 include $(SRCDIR)/gitrev.mk
 include $(SRCDIR)/objects.mk
 
 # sources in netfilter/ directory
+ifdef IPTSCRIPT
+NETFILTEROBJS = iptscript.o
+else
 NETFILTEROBJS = iptcrdr.o iptpinhole.o nfct_get.o
+endif
 
 ALLOBJS = $(BASEOBJS) $(LNXOBJS) $(NETFILTEROBJS)
 
 DEP = $(ALLOBJS:.o=.d)
 
+ifdef IPTSCRIPT
+NETFILTER_SCRIPTS = $(SRCDIR)/iptscript/iptscript.sh
+else
 NETFILTER_SCRIPTS = $(addprefix $(SRCDIR)/netfilter/, \
 	iptables_init.sh iptables_removeall.sh \
 	ip6tables_init.sh ip6tables_removeall.sh \
 	miniupnpd_functions.sh)
+endif
 
 ifneq ($(IPTABLES_PCFILE_FOUND),1)
 
@@ -136,11 +146,7 @@ install:	miniupnpd $(SRCDIR)/miniupnpd.8 miniupnpd.conf \
 	$(INSTALL) -d $(DESTDIR)$(SBININSTALLDIR)
 	$(INSTALL) miniupnpd $(DESTDIR)$(SBININSTALLDIR)
 	$(INSTALL) -d $(DESTDIR)$(ETCINSTALLDIR)
-	$(INSTALL) $(SRCDIR)/netfilter/iptables_init.sh $(DESTDIR)$(ETCINSTALLDIR)
-	$(INSTALL) $(SRCDIR)/netfilter/iptables_removeall.sh $(DESTDIR)$(ETCINSTALLDIR)
-	$(INSTALL) $(SRCDIR)/netfilter/ip6tables_init.sh $(DESTDIR)$(ETCINSTALLDIR)
-	$(INSTALL) $(SRCDIR)/netfilter/ip6tables_removeall.sh $(DESTDIR)$(ETCINSTALLDIR)
-	$(INSTALL) $(SRCDIR)/netfilter/miniupnpd_functions.sh $(DESTDIR)$(ETCINSTALLDIR)
+	$(INSTALL) $(NETFILTER_SCRIPTS) $(DESTDIR)$(ETCINSTALLDIR)
 	$(INSTALL) --mode=0644 -b $(SRCDIR)/miniupnpd.conf $(DESTDIR)$(ETCINSTALLDIR)
 	$(INSTALL) -d $(DESTDIR)$(PREFIX)/etc/init.d
 	$(INSTALL) $(SRCDIR)/linux/miniupnpd.init.d.script $(DESTDIR)$(PREFIX)/etc/init.d/miniupnpd
@@ -178,8 +184,7 @@ testssdppktgen:	testssdppktgen.o
 testasyncsendto:	testasyncsendto.o asyncsendto.o upnputils.o \
 	getroute.o
 
-testportinuse:	testportinuse.o portinuse.o getifaddr.o \
-	iptcrdr.o
+testportinuse:	testportinuse.o portinuse.o getifaddr.o $(NETFILTEROBJS)
 
 testminissdp:	testminissdp.o minissdp.o upnputils.o upnpglobalvars.o \
 	asyncsendto.o getroute.o
--- /dev/null
+++ b/iptscript/iptscript.c
@@ -0,0 +1,749 @@
+#include <netinet/in.h>
+
+#include <sys/types.h>
+#include <sys/wait.h>
+
+#include <stdlib.h>
+#include <stdbool.h>
+#include <stdio.h>
+#include <unistd.h>
+#include <syslog.h>
+#include <string.h>
+
+#include "iptscript.h"
+
+#define IPTSCRIPT_RULE_MAX      1024
+
+#define iptscript_exec(...) \
+    iptscript_exec_a((const char *[]){IPTSCRIPT_PATH, __VA_ARGS__, (const char *)NULL})
+
+#if !defined(STRLCPY)
+#define STRLCPY(dst, src, size)     \
+do                                  \
+{                                   \
+    strncpy((dst), (src), (size));  \
+    (dst)[(size) - 1] = '\0';       \
+}                                   \
+while (0)
+#endif
+
+struct iptscript_rule
+{
+    /* Applicable to both filter and forward rules */
+    int     ipt_proto;                  /* Protocol */
+    int     ipt_ext_port;               /* External port */
+    unsigned int
+            ipt_timestamp;              /* Timestmap */
+    char   *ipt_desc;                   /* Description */
+
+    /* forward rules */
+    int     ipt_int_port;               /* Internal port */
+    char    ipt_int_addr[16];           /* Internal address */
+    char    ipt_rem_forward_addr[16];   /* Forward remote address */
+
+    /* filter rules */
+    char    ipt_ext_addr[16];           /* External IP address */
+    char    ipt_rem_filter_addr[16];    /* Filter remote address */
+
+};
+
+static int iptscript_exec_a(const char * const argv[]);
+
+static bool iptscript_forward_rule(
+        bool add,
+        int proto,
+        int ext_port,
+        const char *int_addr,
+        int int_port,
+        const char *rem_addr);
+
+static bool iptscript_filter_rule(
+        bool add,
+        int proto,
+        const char *int_addr,
+        int int_port,
+        const char *rem_addr);
+
+static int iptscript_rule_add(
+        int proto,
+        int ext_port);
+
+static int iptscript_rule_find(int proto, int ext_port);
+static struct iptscript_rule *iptscript_rule_get(int index);
+static void iptscript_rule_del(int rule_index);
+
+static struct iptscript_rule iptscript_rule_list[IPTSCRIPT_RULE_MAX];
+static int iptscript_rule_len = 0;
+
+/*
+ * ===========================================================================
+ *  Miniupnpd API implementation
+ * ===========================================================================
+ */
+
+/*
+ * Initialize the firewall
+ */
+int init_redirect(void)
+{
+    if (iptscript_exec("init") != 0)
+    {
+        return -1;
+    }
+
+    return 0;
+}
+
+/*
+ * Cleanup
+ */
+void shutdown_redirect(void)
+{
+    (void)iptscript_exec("fini");
+}
+
+/*
+ * Add redirection rule (port forwarding)
+ */
+int add_redirect_rule2(
+        const char *ifname,
+        const char *rhost,
+        unsigned short eport,
+        const char *iaddr,
+        unsigned short iport,
+        int proto,
+        const char *desc,
+        unsigned int timestamp)
+{
+    (void)ifname;
+
+    struct iptscript_rule *prule;
+    int ri;
+
+    ri = iptscript_rule_add(proto, eport);
+    if (ri < 0)
+    {
+        return false;
+    }
+
+    prule = iptscript_rule_get(ri);
+    if (prule->ipt_int_port != 0)
+    {
+        syslog(LOG_ERR, "Forward already exists %d:%d", proto, eport);
+        return false;
+    }
+
+    prule->ipt_timestamp = timestamp;
+    prule->ipt_int_port = iport;
+    STRLCPY(prule->ipt_int_addr, iaddr, sizeof(prule->ipt_int_addr));
+
+    if (rhost != NULL)
+    {
+        STRLCPY(prule->ipt_rem_forward_addr, rhost, sizeof(prule->ipt_rem_forward_addr));
+    }
+
+    if (prule->ipt_desc != NULL)
+    {
+        free(prule->ipt_desc);
+        prule->ipt_desc = NULL;
+    }
+    if (desc != NULL) prule->ipt_desc = strdup(desc);
+
+    if (!iptscript_forward_rule(true, proto, eport, iaddr, iport, rhost))
+    {
+        syslog(LOG_ERR, "Error adding forward rule: %s -> %d -> %s:%d",
+                rhost == NULL ? "(none)" : rhost,
+                eport,
+                iaddr,
+                iport);
+        return -1;
+    }
+
+    return 0;
+}
+
+/*
+ * Add filter rule (accept)
+ */
+int add_filter_rule2(
+        const char *ifname,
+        const char *rhost,
+        const char *iaddr,
+        unsigned short eport,
+        unsigned short iport,
+        int proto,
+        const char *desc)
+{
+    (void)ifname;
+    (void)desc;
+    (void)iport;
+
+    struct iptscript_rule *prule;
+    int ri;
+
+    ri = iptscript_rule_add(proto, eport);
+    if (ri < 0)
+    {
+        return false;
+    }
+
+    prule = iptscript_rule_get(ri);
+    if (prule->ipt_ext_addr[0] != '\0')
+    {
+        syslog(LOG_ERR, "Filter rule already exists %d:%d", proto, eport);
+        return false;
+    }
+
+    STRLCPY(prule->ipt_ext_addr, iaddr, sizeof(prule->ipt_ext_addr));
+
+    if (rhost != NULL)
+    {
+        STRLCPY(prule->ipt_rem_filter_addr, rhost, sizeof(prule->ipt_rem_filter_addr));
+    }
+
+    if (prule->ipt_desc != NULL)
+    {
+        free(prule->ipt_desc);
+        prule->ipt_desc = NULL;
+    }
+    if (desc != NULL) prule->ipt_desc = strdup(desc);
+
+    if (!iptscript_filter_rule(true, proto, iaddr, iport, rhost))
+    {
+        syslog(LOG_ERR, "Error adding filter rule: %s -> %s:%d",
+                rhost == NULL ? "(none)" : rhost,
+                iaddr,
+                iport);
+        return -1;
+    }
+
+    return 0;
+}
+
+/*
+ * Delete both filter and redirection rules
+ */
+int delete_redirect_and_filter_rules(
+        unsigned short eport,
+        int proto)
+{
+    struct iptscript_rule *prule;
+    int ri;
+
+    ri = iptscript_rule_find(proto, eport);
+    if (ri < 0)
+    {
+        return -1;
+    }
+
+    prule = iptscript_rule_get(ri);
+
+    if (!iptscript_filter_rule(
+                false,
+                proto,
+                prule->ipt_int_addr,
+                prule->ipt_int_port,
+                prule->ipt_rem_filter_addr))
+    {
+        syslog(LOG_ERR, "Error removing filter rule: %s:%d -> %s%d",
+                prule->ipt_ext_addr,
+                eport,
+                prule->ipt_int_addr,
+                prule->ipt_int_port);
+    }
+
+    if (!iptscript_forward_rule(
+                false,
+                proto,
+                eport,
+                prule->ipt_ext_addr,
+                prule->ipt_int_port,
+                prule->ipt_rem_forward_addr))
+    {
+        syslog(LOG_ERR, "Error removing forward rule: %s:%d -> %s%d",
+                prule->ipt_ext_addr,
+                eport,
+                prule->ipt_int_addr,
+                prule->ipt_int_port);
+    }
+
+    if (prule->ipt_desc != NULL)
+    {
+        free(prule->ipt_desc);
+    }
+
+    iptscript_rule_del(ri);
+    return 0;
+}
+
+/*
+ * Update rule
+ */
+int update_portmapping(
+        const char * ifname,
+        unsigned short eport,
+        int proto,
+        unsigned short iport,
+        const char * desc,
+        unsigned int timestamp)
+{
+    (void)ifname;
+
+    struct iptscript_rule *prule;
+    int ri;
+
+    ri = iptscript_rule_find(proto, eport);
+    if (ri < 0)
+    {
+        return -1;
+    }
+
+    prule = iptscript_rule_get(ri);
+    prule->ipt_timestamp = timestamp;
+
+    if (prule->ipt_desc != NULL)
+    {
+        free(prule->ipt_desc);
+        prule->ipt_desc = NULL;
+    }
+    if (desc != NULL) prule->ipt_desc = strdup(desc);
+
+    if (iport != prule->ipt_int_port)
+    {
+        if (!iptscript_forward_rule(
+                    false,
+                    proto,
+                    eport,
+                    prule->ipt_ext_addr,
+                    prule->ipt_int_port,
+                    prule->ipt_rem_forward_addr))
+        {
+            return -1;
+        }
+
+        prule->ipt_int_port = iport;
+
+        if (!iptscript_forward_rule(
+                    true,
+                    proto,
+                    eport,
+                    prule->ipt_ext_addr,
+                    prule->ipt_int_port,
+                    prule->ipt_rem_forward_addr))
+        {
+            return -1;
+        }
+    }
+
+    return 0;
+}
+
+/*
+ * Update timestamp/description of the rule
+ */
+int update_portmapping_desc_timestamp(
+        const char * ifname,
+        unsigned short eport,
+        int proto,
+        const char * desc,
+        unsigned int timestamp)
+{
+    (void)ifname;
+    (void)desc;
+    (void)timestamp;
+
+    struct iptscript_rule *prule;
+    int ri;
+
+    ri = iptscript_rule_find(proto, eport);
+    if (ri < 0)
+    {
+        return -1;
+    }
+
+    prule = iptscript_rule_get(ri);
+
+    prule->ipt_timestamp = timestamp;
+
+    if (prule->ipt_desc != NULL)
+    {
+        free(prule->ipt_desc);
+        prule->ipt_desc = NULL;
+    }
+    if (desc != NULL) prule->ipt_desc = strdup(desc);
+
+    return 0;
+}
+
+/*
+ * Get current redirection/forwarding rule, the keys are proto and eport
+ */
+int get_redirect_rule(
+        const char * ifname,
+        unsigned short eport,
+        int proto,
+        char *iaddr,
+        int iaddrlen,
+        unsigned short *iport,
+        char *desc,
+        int desclen,
+        char *rhost,
+        int rhostlen,
+        unsigned int *timestamp,
+        u_int64_t *packets,
+        u_int64_t * bytes)
+{
+    (void)ifname;
+
+    struct iptscript_rule *prule;
+    int ri;
+
+    ri = iptscript_rule_find(proto, eport);
+    if (ri < 0)
+    {
+        return -1;
+    }
+
+    prule = iptscript_rule_get(ri);
+    if (prule == NULL)
+    {
+        return -1;
+    }
+
+    if (iport != NULL) *iport = prule->ipt_int_port;
+    if (iaddr != NULL) STRLCPY(iaddr, prule->ipt_int_addr, iaddrlen);
+    if (timestamp != NULL) *timestamp = prule->ipt_timestamp;
+
+    if (rhost != NULL)
+    {
+        rhost[0] = '\0';
+        if (prule->ipt_rem_forward_addr[0] != '\0')
+        {
+            STRLCPY(rhost, prule->ipt_rem_forward_addr, rhostlen);
+        }
+        else if (prule->ipt_rem_filter_addr[0] != '\0')
+        {
+            STRLCPY(rhost, prule->ipt_rem_filter_addr, rhostlen);
+        }
+    }
+
+    if (desc != NULL)
+    {
+        STRLCPY(desc, (prule->ipt_desc == NULL) ? "" : prule->ipt_desc, desclen);
+    }
+
+    if (packets != NULL) *packets = 0;
+    if (bytes != NULL) *bytes = 0;
+
+    return 0;
+}
+
+/*
+ * Get redirection rule by index
+ */
+int get_redirect_rule_by_index(
+        int index,
+        char * ifname,
+        unsigned short * eport,
+        char * iaddr,
+        int iaddrlen,
+        unsigned short * iport,
+        int * proto,
+        char * desc,
+        int desclen,
+        char * rhost,
+        int rhostlen,
+        unsigned int * timestamp,
+        u_int64_t * packets,
+        u_int64_t * bytes)
+{
+    (void)index;
+    (void)ifname;
+
+    struct iptscript_rule *prule;
+
+    prule = iptscript_rule_get(index);
+    if (prule == NULL)
+    {
+        return -1;
+    }
+
+    if (eport != NULL) *eport = prule->ipt_ext_port;
+    if (iaddr != NULL) STRLCPY(iaddr, prule->ipt_int_addr, iaddrlen);
+    if (iport != NULL) *iport = prule->ipt_int_port;
+    if (proto != NULL) *proto = prule->ipt_proto;
+    if (timestamp != NULL) *timestamp = prule->ipt_timestamp;
+
+    if (rhost != NULL)
+    {
+        rhost[0] = '\0';
+        if (prule->ipt_rem_forward_addr[0] != '\0')
+        {
+            STRLCPY(rhost, prule->ipt_rem_forward_addr, rhostlen);
+        }
+        else if (prule->ipt_rem_filter_addr[0] != '\0')
+        {
+            STRLCPY(rhost, prule->ipt_rem_filter_addr, rhostlen);
+        }
+    }
+
+    if (desc != NULL)
+    {
+        STRLCPY(desc, (prule->ipt_desc == NULL) ? "" : prule->ipt_desc, desclen);
+    }
+
+    if (packets != NULL) *packets = 0;
+    if (bytes != NULL) *bytes = 0;
+
+    return 0;
+}
+
+/*
+ * Retrieve a list of currently active port mappings
+ */
+unsigned short *get_portmappings_in_range(
+        unsigned short startport,
+        unsigned short endport,
+        int proto,
+        unsigned int * number)
+{
+    struct iptscript_rule *prule;
+    int ri;
+
+    unsigned short *ra = NULL;
+
+    *number = 0;
+
+    for (ri = 0; ri < IPTSCRIPT_RULE_MAX; ri++)
+    {
+        prule = iptscript_rule_get(ri);
+        if (prule == NULL) break;
+
+        if (prule->ipt_proto != proto) continue;
+        if (prule->ipt_ext_port < startport) continue;
+        if (prule->ipt_ext_port > endport) continue;
+
+        if ((*number % 32) == 0)
+        {
+            ra = realloc(ra, (*number + 32) * sizeof(unsigned short));
+        }
+
+        ra[(*number)++] = prule->ipt_ext_port;
+    }
+
+    return ra;
+}
+
+/*
+ * ===========================================================================
+ *  Private implementation functions
+ * ===========================================================================
+ */
+
+/*
+ * This command takes an input array of strings and executes the iptscript command
+ * giving the array as parameters
+ */
+int iptscript_exec_a(const char * const argv[])
+{
+    int status;
+
+    pid_t cpid = fork();
+
+    if (cpid != 0)
+    {
+        if (waitpid(cpid, &status, 0) != cpid || !WIFEXITED(status))
+        {
+            return -1;
+        }
+
+        return WEXITSTATUS(status);
+    }
+
+    execvp(IPTSCRIPT_PATH, (char * const *)argv);
+
+    syslog(LOG_ERR, "Error executing: %s %s", IPTSCRIPT_PATH, argv[1]);
+
+    return 0;
+};
+
+/*
+ * Call the iptscript.sh script to add or delete a redirection/forwarding
+ * rule
+ */
+bool iptscript_forward_rule(
+        bool add,
+        int proto,
+        int ext_port,
+        const char *int_addr,
+        int int_port,
+        const char *rem_addr)
+{
+    char ext_port_s[16];
+    char int_port_s[16];
+    char *proto_s;
+    char *cmd;
+    int rc;
+
+    switch (proto)
+    {
+        case IPPROTO_TCP:
+            proto_s = "tcp";
+            break;
+        case IPPROTO_UDP:
+            proto_s = "udp";
+            break;
+
+        default:
+            /* Protocol not supported */
+            return false;
+    }
+
+    snprintf(ext_port_s, sizeof(ext_port_s), "%d", ext_port);
+    snprintf(int_port_s, sizeof(int_port_s), "%d", int_port);
+
+    cmd = add ? "add_forward_rule" : "del_forward_rule";
+
+    if (rem_addr == NULL)
+    {
+        rc = iptscript_exec(cmd, proto_s, ext_port_s, int_addr, int_port_s);
+    }
+    else
+    {
+        rc = iptscript_exec(cmd, proto_s, ext_port_s, int_addr, int_port_s, rem_addr);
+    }
+
+    return rc == 0;
+}
+
+/*
+ * Call the iptscript.sh script to add or delete a filtering(accept) rule
+ */
+bool iptscript_filter_rule(
+        bool add,
+        int proto,
+        const char *int_addr,
+        int int_port,
+        const char *rem_addr)
+{
+    char int_port_s[16];
+    char *proto_s;
+    char *cmd;
+    int rc;
+
+    switch (proto)
+    {
+        case IPPROTO_TCP:
+            proto_s = "tcp";
+            break;
+        case IPPROTO_UDP:
+            proto_s = "udp";
+            break;
+
+        default:
+            /* Protocol not supported */
+            return false;
+    }
+
+    snprintf(int_port_s, sizeof(int_port_s), "%d", int_port);
+
+    cmd = add ? "add_filter_rule" : "del_filter_rule";
+
+    if (rem_addr == NULL)
+    {
+        rc = iptscript_exec(cmd, proto_s, int_addr, int_port_s);
+    }
+    else
+    {
+        rc = iptscript_exec(cmd, proto_s, int_addr, int_port_s, rem_addr);
+    }
+
+    return rc == 0;
+}
+
+/*
+ * Add a rule definition to the rule list, return the index of the rule
+ */
+int iptscript_rule_add(
+        int proto,
+        int ext_port)
+{
+    struct iptscript_rule *prule;
+    int ri;
+
+    ri = iptscript_rule_find(proto, ext_port);
+    if (ri >= 0) return ri;
+
+    if (iptscript_rule_len >= IPTSCRIPT_RULE_MAX)
+    {
+        return -1;
+    }
+
+    ri = iptscript_rule_len++;
+    prule = &iptscript_rule_list[ri];
+
+    memset(prule, 0, sizeof(*prule));
+
+    prule->ipt_proto = proto;
+    prule->ipt_ext_port = ext_port;
+
+    return ri;
+}
+
+/*
+ * Find rule matching the proto and ext_port criteria
+ */
+int iptscript_rule_find(
+        int proto,
+        int ext_port)
+{
+    int ri;
+
+    for (ri = 0; ri < iptscript_rule_len; ri++)
+    {
+        if (iptscript_rule_list[ri].ipt_ext_port == 0) break;
+
+        if (iptscript_rule_list[ri].ipt_ext_port == ext_port &&
+                iptscript_rule_list[ri].ipt_proto == proto)
+        {
+            return ri;
+        }
+    }
+
+    return -1;
+}
+
+/*
+ * Return a rule definition by index
+ */
+struct iptscript_rule *iptscript_rule_get(int index)
+{
+    if (index >= iptscript_rule_len) return NULL;
+
+    return &iptscript_rule_list[index];
+}
+
+/*
+ * Remove rule referenced by index
+ */
+void iptscript_rule_del(int index)
+{
+    /* Out of range error */
+    if (index >= iptscript_rule_len)
+    {
+        return;
+    }
+
+    iptscript_rule_len--;
+
+    /* If we're removing the last element, we can simply decrease the index */
+    if (index == iptscript_rule_len)
+    {
+        return;
+    }
+
+    memcpy(
+            &iptscript_rule_list[index],
+            &iptscript_rule_list[iptscript_rule_len],
+            sizeof(iptscript_rule_list[index]));
+}
--- /dev/null
+++ b/iptscript/iptscript.h
@@ -0,0 +1,38 @@
+#ifndef IPTSCRIPT_H_INCLUDED
+#define IPTSCRIPT_H_INCLUDED
+
+#include <sys/types.h>
+
+#include "../config.h"
+#include "../commonrdr.h"
+
+int add_redirect_rule2(
+        const char *ifname,
+        const char *rhost,
+        unsigned short eport,
+        const char *iaddr,
+        unsigned short iport,
+        int proto,
+        const char *desc,
+        unsigned int timestamp);
+
+int add_filter_rule2(
+        const char *ifname,
+        const char *rhost,
+        const char *iaddr,
+        unsigned short eport,
+        unsigned short iport,
+        int proto,
+        const char *desc);
+
+int delete_redirect_and_filter_rules(
+        unsigned short eport,
+        int proto);
+
+unsigned short *get_portmappings_in_range(
+        unsigned short startport,
+        unsigned short endport,
+        int proto,
+        unsigned int * number);
+
+#endif /* IPTSCRIPT_H_INCLUDED */
--- a/upnpredirect.c
+++ b/upnpredirect.c
@@ -38,6 +38,9 @@
 #if defined(USE_IPFW)
 #include "ipfw/ipfwrdr.h"
 #endif
+#if defined(USE_IPTSCRIPT)
+#include "iptscript/iptscript.h"
+#endif
 #ifdef USE_MINIUPNPDCTL
 #include <stdio.h>
 #include <unistd.h>
--- /dev/null
+++ b/iptscript/iptscript.sh
@@ -0,0 +1,81 @@
+#!/bin/sh
+
+IPTABLES="iptables --wait"
+
+init()
+{
+    $IPTABLES -t nat -F MINIUPNPD
+    $IPTABLES -t filter -F MINIUPNPD
+}
+
+add_forward_rule()
+{
+    proto="$1"
+    ext_port="$2"
+    int_addr="$3"
+    int_port="$4"
+    rem_host="$5"
+
+    $IPTABLES -t nat -A MINIUPNPD -j DNAT -p "$proto" --dport "$ext_port" -m conntrack --ctstate NEW --to "$int_addr:$int_port" ${rem_host:+-s ${rem_host}}
+}
+
+del_forward_rule()
+{
+    proto="$1"
+    ext_port="$2"
+    int_addr="$3"
+    int_port="$4"
+    rem_host="$5"
+
+    $IPTABLES -t nat -D MINIUPNPD -j DNAT -p "$proto" --dport "$ext_port" -m conntrack --ctstate NEW --to "$int_addr:$int_port" ${rem_host:+-s ${rem_host}}
+}
+
+add_filter_rule()
+{
+    proto="$1"
+    int_addr="$2"
+    int_port="$3"
+    rem_host="$4"
+
+    $IPTABLES -t filter -A MINIUPNPD -j ACCEPT -p "$proto" -d "$int_addr" --dport "$int_port" ${rem_host:+-s ${rem_host}}
+}
+
+del_filter_rule()
+{
+    proto="$1"
+    int_addr="$2"
+    int_port="$3"
+    rem_host="$4"
+
+    $IPTABLES -t filter -D MINIUPNPD -j ACCEPT -p "$proto" -d "$int_addr" --dport "$int_port" ${rem_host:+-s ${rem_host}}
+}
+
+case "$1" in
+    init|fini)
+        init
+        ;;
+
+    add_forward_rule)
+        shift
+        add_forward_rule "$@"
+        ;;
+
+    del_forward_rule)
+        shift
+        del_forward_rule "$@"
+        ;;
+
+    add_filter_rule)
+        shift
+        add_filter_rule "$@"
+        ;;
+
+    del_filter_rule)
+        shift
+        del_filter_rule "$@"
+        ;;
+    *)
+        echo Bad options: "$@"
+        ;;
+esac
+
